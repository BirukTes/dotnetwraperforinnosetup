; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "name", "MyApp")
#define MyAppVersion ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "version", "unknown")
#define MyAppPublisher ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "publisher", "MyCompany")
#define MyAppURL ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "url", "unknown")
#define MySupportURL ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "support_url", "unknown")
#define MyAppExeName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "startup_filename", "unknown")
#define AppCPU ReadIni(SourcePath + "\ProjectMetaData.txt", "platform", "cpu", "unknown")
#define FeedbackUrl ReadIni(SourcePath + "\ProjectMetaData.txt", "uninstall", "feedback_url", "unknown")
#define MyAppId ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "id", "unknown")
#define DeployableFolder ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "deployable_folder", "unknown")
#define InfoBeforeFile ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "eula_file", "")
#define MyAppIconPath ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "icon_path", "")
#define MyAppIconName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "icon_name", "")
#define MyOutputDir ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "output_dir", "\Output")
#define OutputFilename ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "output_filename", "setup")
#define ShortcutName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "shortcut_name", "MyApp")
#define FileExtensionAssociation ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "extension", "")

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MySupportURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetPFPath|{#AppCPU}}\{#MyAppPublisher}\{#MyAppName}
;{pf}\{#MyAppPublisher}\{#MyAppName}
DefaultGroupName={#MyAppPublisher}\{#MyAppName}
AllowNoIcons=yes
InfoBeforeFile={#InfoBeforeFile}
OutputDir={#MyOutputDir}
OutputBaseFilename={#OutputFilename}
Compression=lzma
SolidCompression=yes
;#section Signtool
SignTool=signtool
;#end_section Signtool
;#section Association
ChangesAssociations=yes
;#end_section Association

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#DeployableFolder}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyAppIconPath}{#MyAppIconName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
;#section Association
Root: HKCR; Subkey: "{#FileExtensionAssociation}"; ValueType: string; ValueName: ""; ValueData: "{#FileExtensionAssociation}"; Flags: uninsdeletevalue 
Root: HKCR; Subkey: "{#FileExtensionAssociation}"; ValueType: string; ValueName: ""; ValueData: "{#FileExtensionAssociation}"; Flags: uninsdeletekey 
Root: HKCR; Subkey: "{#FileExtensionAssociation}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppIconName}" 
Root: HKCR; Subkey: "{#FileExtensionAssociation}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1""" 
;#end_section Association
;#section ContextMenu
;#end_section ContextMenu

[Icons]
Name: "{group}\{#ShortcutName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIconName}"
Name: "{group}\{cm:UninstallProgram,{#ShortcutName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#ShortcutName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon; IconFilename: "{app}\{#MyAppIconName}"

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: files; Name: "{userappdata}\{#MyAppPublisher}\{#MyAppName}\*.*"
Type: dirifempty; Name: "{userappdata}\{#MyAppPublisher}\{#MyAppName}"
Type: dirifempty; Name: "{userappdata}\{#MyAppPublisher}"

#include "it_download.iss";     

[Code]
procedure InitializeWizard();
begin
  itd_init;
  itd_downloadafter(wpReady);
end;

function GetPFPath(appCpu : string): string;
begin   
  if (appCpu = 'AnyCPU') then
    begin
      if (IsWin64) then
        begin
          Result := ExpandConstant('{pf64}');
        end
      else
        begin
          Result := ExpandConstant('{pf32}');
        end
    end
  else
    if (appCpu = '64bit') then
      begin
        Result := ExpandConstant('{pf64}');
      end
    else
      begin
        Result := ExpandConstant('{pf32}');
      end;
end;

//#section PrerequisiteScripts
//#end_section PrerequisiteScripts

function InitializeSetup(): Boolean;
var        
    ErrCode: integer;
    FinalResult: boolean;
begin
  FinalResult := true;
//#section PrerequisiteInit
//#end_section PrerequisiteInit
  result := FinalResult;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
    ErrCode: integer;
begin
 if CurStep=ssInstall then 
   begin 
//#section PrerequisiteInstall
//#end_section PrerequisiteInstall
   end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
    ErrCode: integer;
    Url: string;
begin
    Url := '{#FeedbackUrl}';
    if (CurUninstallStep=usDone) then
    begin
        if (Url <> '') then
          ShellExec('open', Url, '', '', SW_SHOW, ewNoWait, ErrCode);
    end;
end;