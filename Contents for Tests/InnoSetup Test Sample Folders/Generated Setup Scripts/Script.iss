; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "name", "MyApp")
#define MyAppVersion ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "version", "unknown")
#define MyAppPublisher ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "publisher", "MyCompany")
#define MyAppURL ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "url", "unknown")
#define MySupportURL ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "support_url", "unknown")
#define MyAppExeName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "startup_filename", "unknown")
#define AppCPU ReadIni(SourcePath + "\ProjectMetaData.txt", "platform", "cpu", "unknown")
#define FeedbackUrl ReadIni(SourcePath + "\ProjectMetaData.txt", "uninstall", "feedback_url", "unknown")
#define MyAppId ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "id", "unknown")
#define DeployableFolder ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "deployable_folder", "unknown")
#define InfoBeforeFile ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "eula_file", "")
#define MyAppIconPath ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "icon_path", "")
#define MyAppIconName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "icon_name", "")
#define MyOutputDir ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "output_dir", "\Output")
#define OutputFilename ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "output_filename", "setup")
#define ShortcutName ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "shortcut_name", "MyApp")
#define FileExtensionAssociation ReadIni(SourcePath + "\ProjectMetaData.txt", "application", "extension", "")

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MySupportURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetPFPath|{#AppCPU}}\{#MyAppPublisher}\{#MyAppName}
;{pf}\{#MyAppPublisher}\{#MyAppName}
DefaultGroupName={#MyAppPublisher}\{#MyAppName}
AllowNoIcons=yes
InfoBeforeFile={#InfoBeforeFile}
OutputDir={#MyOutputDir}
OutputBaseFilename={#OutputFilename}
Compression=lzma
SolidCompression=yes

;#section Association
ChangesAssociations=yes
;#end_section Association

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#DeployableFolder}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyAppIconPath}{#MyAppIconName}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
;#section Association
Root: HKCR; Subkey: "{#FileExtensionAssociation}"; ValueType: string; ValueName: ""; ValueData: "{#FileExtensionAssociation}"; Flags: uninsdeletevalue 
Root: HKCR; Subkey: "{#FileExtensionAssociation}"; ValueType: string; ValueName: ""; ValueData: "{#FileExtensionAssociation}"; Flags: uninsdeletekey 
Root: HKCR; Subkey: "{#FileExtensionAssociation}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppIconName}" 
Root: HKCR; Subkey: "{#FileExtensionAssociation}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1""" 
;#end_section Association
;#section ContextMenu
Root: HKCR; Subkey: Folder\shell\Spice Proj; ValueType: string; Flags: uninsdeletekey deletekey; ValueName: Icon; ValueData: """{app}\{#MyAppIconName}"""
Root: HKCR; Subkey: Folder\shell\Spice Proj\command; ValueType: string; ValueData: """{app}\{#MyAppExeName}"" ""%1"""; Flags: uninsdeletekey deletekey
;#end_section ContextMenu

[Icons]
Name: "{group}\{#ShortcutName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIconName}"
Name: "{group}\{cm:UninstallProgram,{#ShortcutName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#ShortcutName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon; IconFilename: "{app}\{#MyAppIconName}"

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: files; Name: "{userappdata}\{#MyAppPublisher}\{#MyAppName}\*.*"
Type: dirifempty; Name: "{userappdata}\{#MyAppPublisher}\{#MyAppName}"
Type: dirifempty; Name: "{userappdata}\{#MyAppPublisher}"

#include "it_download.iss";     

[Code]
procedure InitializeWizard();
begin
  itd_init;
  itd_downloadafter(wpReady);
end;

function GetPFPath(appCpu : string): string;
begin   
  if (appCpu = 'AnyCPU') then
    begin
      if (IsWin64) then
        begin
          Result := ExpandConstant('{pf64}');
        end
      else
        begin
          Result := ExpandConstant('{pf32}');
        end
    end
  else
    if (appCpu = '64bit') then
      begin
        Result := ExpandConstant('{pf64}');
      end
    else
      begin
        Result := ExpandConstant('{pf32}');
      end;
end;

//#section PrerequisiteScripts
function IsLocalDbDetected_89335bf2_cf8e_4e3e_8e20_e5ce4ba6c3a2(): boolean;
var        
    key: string;
    parentInstance: String;
    success: boolean;
begin		
    key := 'SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions\11.0';
    success := RegQueryStringValue(HKLM, key, 'ParentInstance', parentInstance);
    result := success;
end;

function IsDotNetDetected_78e2eaec_b1bb_464f_8e29_34ef3f512b22(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var        
    key: string;
    install, release, serviceCount: cardinal;
    check45, check451, success: boolean;
begin
    version := 'v' + version;
    // .NET 4.5 installs as update to .NET 4.0 Full
    if version = 'v4.5' then begin
        version := 'v4\Full';
        check45 := true;
    end else
        check45 := false;

	// .NET 4.5.1 installs as update to .NET 4.0 Full
    if version = 'v4.5.1' then begin
        version := 'v4\Full';
        check451 := true;
    end else
        check451 := false;
		
    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0/4.5/4.5.1 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 uses additional value Release
    if check45 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378389);
    end;
	
	// .NET 4.5.1 uses additional value Release
    if check451 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378675);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;

//#end_section PrerequisiteScripts

function InitializeSetup(): Boolean;
var        
    ErrCode: integer;
    FinalResult: boolean;
begin
  FinalResult := true;
//#section PrerequisiteInit
if (not IsLocalDbDetected_89335bf2_cf8e_4e3e_8e20_e5ce4ba6c3a2()) then begin
          
    if IsWin64 then begin
      itd_addfile('http://dl.dropboxusercontent.com/u/204009/SqlLocalDB.x64.MSI', expandconstant('{tmp}\SqlLocalDB.MSI'));
    end else begin
      itd_addfile('http://dl.dropboxusercontent.com/u/204009/SqlLocaLDB.x86.MSI', expandconstant('{tmp}\SqlLocalDB.MSI'));
    end;
    
end;

if (not IsDotNetDetected_78e2eaec_b1bb_464f_8e29_34ef3f512b22('1.1.4322', 0)) then begin
          
    itd_addfile('http://dl.dropboxusercontent.com/u/204009/dotnetfx.exe', expandconstant('{tmp}\dotnet.exe'));
    
end;

//#end_section PrerequisiteInit
  result := FinalResult;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
    ErrCode: integer;
begin
 if CurStep=ssInstall then 
   begin 
//#section PrerequisiteInstall
WizardForm.StatusLabel.Caption := 'Please wait while setup install prerequisite: SqlLocalDB...';
ShellExec('open', 'msiexec', '/i ' + AddQuotes(ExpandConstant('{tmp}\SqlLocalDB.MSI')) + ' /qn IACCEPTSQLLOCALDBLICENSETERMS=YES', '', SW_SHOW, ewWaitUntilTerminated, ErrCode);

if (not IsLocalDbDetected_89335bf2_cf8e_4e3e_8e20_e5ce4ba6c3a2()) then begin
    MsgBox('Automatic installation of SQL Server LocalDB failed. Please try manual installation.', mbInformation, MB_OK);
    Abort();
end;
WizardForm.StatusLabel.Caption := '';
WizardForm.StatusLabel.Caption := 'Please wait while setup install prerequisite: .net framework...';
ShellExec('open', ExpandConstant('{tmp}\dotnet.exe'), '', '', SW_SHOW, ewWaitUntilTerminated, ErrCode);

if (not IsDotNetDetected_78e2eaec_b1bb_464f_8e29_34ef3f512b22('1.1.4322', 0)) then begin
    MsgBox('Automatic installation of .net framework failed. Please try manual installation.', mbInformation, MB_OK);
    Abort();
end;
WizardForm.StatusLabel.Caption := '';
//#end_section PrerequisiteInstall
   end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
    ErrCode: integer;
    Url: string;
begin
    Url := '{#FeedbackUrl}';
    if (CurUninstallStep=usDone) then
    begin
        if (Url <> '') then
          ShellExec('open', Url, '', '', SW_SHOW, ewNoWait, ErrCode);
    end;
end;